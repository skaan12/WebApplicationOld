// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Artist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Award", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("WinnerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.CategoryFilm", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("CategoryFilms");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Director", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FaultyFilm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int?>("FilmStatus")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("InventoryID");

                    b.ToTable("FaultyFilms");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Film", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StockInQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Subtitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SpecialCategoryID");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            ID = 31,
                            Actors = "Carroll Schaden,Bette Leuschke,Julie Willms",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 990, DateTimeKind.Local).AddTicks(7984),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Culpa recusandae nihil beatae et ut dicta vitae consequatur harum.",
                            Director = "Emily Breitenberg",
                            FilmName = "Handcrafted Fresh Soap",
                            Language = "Spanish",
                            OriginalName = "Tasty Frozen TunaOriginal",
                            Status = 0,
                            StockInQuantity = 85,
                            Subtitles = "Spanish",
                            Supplier = "Von, Casper and Welch",
                            TrailerURL = "http://casper.info",
                            Year = new DateTime(2022, 8, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 32,
                            Actors = "Freddy Wuckert,Nia Ortiz,Dejuan Flatley",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 991, DateTimeKind.Local).AddTicks(7207),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "İn itaque voluptas aliquam itaque non sint corporis excepturi dicta.",
                            Director = "Kelli Schumm",
                            FilmName = "Unbranded Metal Chips",
                            Language = "English",
                            OriginalName = "Unbranded Steel SaladOriginal",
                            Status = 0,
                            StockInQuantity = 93,
                            Subtitles = "English",
                            Supplier = "Wintheiser LLC",
                            TrailerURL = "http://novella.net",
                            Year = new DateTime(2000, 2, 27, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 33,
                            Actors = "Sydney Kutch,Fernando Ortiz,Kelley Hudson",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 992, DateTimeKind.Local).AddTicks(1419),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Saepe eum et id porro voluptates voluptas sed libero culpa.",
                            Director = "Roy Bahringer",
                            FilmName = "Licensed Rubber Ball",
                            Language = "English",
                            OriginalName = "Unbranded Cotton FishOriginal",
                            Status = 0,
                            StockInQuantity = 91,
                            Subtitles = "Spanish",
                            Supplier = "Hickle - Cartwright",
                            TrailerURL = "https://bill.org",
                            Year = new DateTime(2002, 11, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 34,
                            Actors = "Rebecca Cremin,Ora Kunze,Rafael Heathcote",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 992, DateTimeKind.Local).AddTicks(4890),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Consequuntur ut suscipit voluptas dolore occaecati sunt maxime illo iste.",
                            Director = "Demond Lubowitz",
                            FilmName = "Licensed Granite Soap",
                            Language = "Spanish",
                            OriginalName = "Rustic Soft ShirtOriginal",
                            Status = 0,
                            StockInQuantity = 52,
                            Subtitles = "English",
                            Supplier = "Walter - Stanton",
                            TrailerURL = "https://lavonne.info",
                            Year = new DateTime(2018, 2, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 35,
                            Actors = "Zella Mosciski,Aaliyah Hegmann,Wanda Auer",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 992, DateTimeKind.Local).AddTicks(8198),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Accusantium libero porro sit deserunt tempora qui sunt sit exercitationem.",
                            Director = "King Kilback",
                            FilmName = "Fantastic Fresh Bacon",
                            Language = "English",
                            OriginalName = "Small Rubber CarOriginal",
                            Status = 0,
                            StockInQuantity = 5,
                            Subtitles = "English",
                            Supplier = "Lebsack - Carter",
                            TrailerURL = "https://earl.com",
                            Year = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 36,
                            Actors = "Lenny Hayes,Cecelia Deckow,Odell McClure",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 993, DateTimeKind.Local).AddTicks(1401),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Error ut iste rerum aperiam odio sapiente quis ab aut.",
                            Director = "Verna Price",
                            FilmName = "Ergonomic Metal Fish",
                            Language = "English",
                            OriginalName = "Handmade Granite FishOriginal",
                            Status = 0,
                            StockInQuantity = 10,
                            Subtitles = "English",
                            Supplier = "Dooley - Stiedemann",
                            TrailerURL = "http://malcolm.org",
                            Year = new DateTime(2006, 12, 20, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 37,
                            Actors = "Kirstin Flatley,Edgar Anderson,Hilton Adams",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 993, DateTimeKind.Local).AddTicks(4611),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Eum necessitatibus et perspiciatis corrupti labore qui magnam et labore.",
                            Director = "Noemy Greenfelder",
                            FilmName = "Handmade Plastic Tuna",
                            Language = "French",
                            OriginalName = "Practical Steel ChipsOriginal",
                            Status = 0,
                            StockInQuantity = 22,
                            Subtitles = "French",
                            Supplier = "Harber - Beatty",
                            TrailerURL = "https://garland.com",
                            Year = new DateTime(2008, 1, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 38,
                            Actors = "Hermann Jaskolski,Xzavier Johns,Dante Kemmer",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 993, DateTimeKind.Local).AddTicks(7929),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Eveniet accusantium explicabo non et sunt a rerum sit est.",
                            Director = "Morgan Gottlieb",
                            FilmName = "Licensed Steel Fish",
                            Language = "French",
                            OriginalName = "Refined Soft CheeseOriginal",
                            Status = 0,
                            StockInQuantity = 95,
                            Subtitles = "English",
                            Supplier = "Krajcik LLC",
                            TrailerURL = "https://vena.net",
                            Year = new DateTime(2005, 7, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 39,
                            Actors = "Alyson Lynch,Silas Larson,Domenico Grady",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 994, DateTimeKind.Local).AddTicks(1111),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Porro et corrupti iusto deleniti vel quia consequatur a nostrum.",
                            Director = "Annie Hartmann",
                            FilmName = "Tasty Soft Shirt",
                            Language = "Spanish",
                            OriginalName = "Unbranded Frozen CarOriginal",
                            Status = 0,
                            StockInQuantity = 2,
                            Subtitles = "English",
                            Supplier = "Rice, Turcotte and Howell",
                            TrailerURL = "https://newton.org",
                            Year = new DateTime(2012, 1, 13, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 40,
                            Actors = "Raymundo Hilpert,Earnestine Kris,Kassandra Hintz",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 994, DateTimeKind.Local).AddTicks(4338),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Voluptatem officiis maxime quibusdam dicta esse quo sit rerum quia.",
                            Director = "Zane Smitham",
                            FilmName = "Generic Plastic Shirt",
                            Language = "English",
                            OriginalName = "Handcrafted Fresh CheeseOriginal",
                            Status = 0,
                            StockInQuantity = 73,
                            Subtitles = "English",
                            Supplier = "Donnelly, Dibbert and Rogahn",
                            TrailerURL = "http://conrad.org",
                            Year = new DateTime(1998, 7, 3, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 41,
                            Actors = "Davon Prohaska,Clotilde Feil,Zackary Simonis",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 994, DateTimeKind.Local).AddTicks(7487),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Laborum accusantium voluptatem quibusdam eum vero dolores tenetur fugit et.",
                            Director = "Leonie Rolfson",
                            FilmName = "Small Soft Bike",
                            Language = "French",
                            OriginalName = "Unbranded Frozen ComputerOriginal",
                            Status = 0,
                            StockInQuantity = 13,
                            Subtitles = "Spanish",
                            Supplier = "Monahan - Gleichner",
                            TrailerURL = "http://caesar.name",
                            Year = new DateTime(2002, 3, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 42,
                            Actors = "Lura Mante,Audreanne Kihn,Howard Haag",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 995, DateTimeKind.Local).AddTicks(557),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Enim quam minus voluptatum minus omnis dolore rem aut necessitatibus.",
                            Director = "Anahi Nitzsche",
                            FilmName = "Small Granite Tuna",
                            Language = "English",
                            OriginalName = "Refined Fresh ChipsOriginal",
                            Status = 0,
                            StockInQuantity = 58,
                            Subtitles = "French",
                            Supplier = "Kautzer and Sons",
                            TrailerURL = "https://bailey.org",
                            Year = new DateTime(2014, 7, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 43,
                            Actors = "Van Zulauf,Nola Goyette,Elinore Hettinger",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 995, DateTimeKind.Local).AddTicks(3711),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "İtaque occaecati error ullam sint alias eos quis velit autem.",
                            Director = "Fritz Ortiz",
                            FilmName = "Unbranded Plastic Keyboard",
                            Language = "German",
                            OriginalName = "Licensed Fresh BallOriginal",
                            Status = 0,
                            StockInQuantity = 23,
                            Subtitles = "Spanish",
                            Supplier = "Feil - Jerde",
                            TrailerURL = "https://jane.net",
                            Year = new DateTime(2004, 12, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 44,
                            Actors = "Dejuan Johns,Samantha Haag,Vaughn Conn",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 995, DateTimeKind.Local).AddTicks(6814),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Eum in cumque consequatur inventore earum quia illo exercitationem quo.",
                            Director = "Brennan Langworth",
                            FilmName = "Intelligent Frozen Keyboard",
                            Language = "French",
                            OriginalName = "Refined Plastic TunaOriginal",
                            Status = 0,
                            StockInQuantity = 13,
                            Subtitles = "French",
                            Supplier = "Deckow - Douglas",
                            TrailerURL = "https://pinkie.com",
                            Year = new DateTime(1998, 4, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 45,
                            Actors = "Daphnee Pollich,Ara Schinner,Wilfredo Connelly",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 995, DateTimeKind.Local).AddTicks(9917),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Odio ut excepturi saepe expedita non porro dicta dolorem voluptates.",
                            Director = "Kayley Weissnat",
                            FilmName = "Unbranded Plastic Mouse",
                            Language = "French",
                            OriginalName = "Unbranded Cotton ChipsOriginal",
                            Status = 0,
                            StockInQuantity = 14,
                            Subtitles = "Spanish",
                            Supplier = "Wilkinson Group",
                            TrailerURL = "http://juliana.info",
                            Year = new DateTime(2014, 4, 20, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 46,
                            Actors = "Salvador Lockman,Shemar Renner,Jess Christiansen",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 996, DateTimeKind.Local).AddTicks(3030),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Est soluta numquam rerum aperiam maiores voluptatum ducimus ipsum possimus.",
                            Director = "Cassidy Effertz",
                            FilmName = "Ergonomic Fresh Towels",
                            Language = "French",
                            OriginalName = "Gorgeous Plastic ComputerOriginal",
                            Status = 0,
                            StockInQuantity = 19,
                            Subtitles = "German",
                            Supplier = "Crist, Rodriguez and Simonis",
                            TrailerURL = "https://marcia.net",
                            Year = new DateTime(2008, 7, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 47,
                            Actors = "Deshaun Pagac,Jairo Crona,Velma Cronin",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 996, DateTimeKind.Local).AddTicks(6598),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Recusandae aliquid ea minima deleniti aut numquam in aut modi.",
                            Director = "Rhiannon Rogahn",
                            FilmName = "Handcrafted Concrete Chips",
                            Language = "Spanish",
                            OriginalName = "Licensed Soft PantsOriginal",
                            Status = 0,
                            StockInQuantity = 89,
                            Subtitles = "French",
                            Supplier = "Torp Group",
                            TrailerURL = "https://ara.com",
                            Year = new DateTime(2004, 11, 10, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 48,
                            Actors = "Destiney Barrows,Kathlyn Hudson,Margarette Kunde",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 996, DateTimeKind.Local).AddTicks(9722),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Provident eveniet amet doloribus id quam esse ratione excepturi quidem.",
                            Director = "Dewitt Schmidt",
                            FilmName = "Rustic Cotton Cheese",
                            Language = "Spanish",
                            OriginalName = "Handmade Frozen CarOriginal",
                            Status = 0,
                            StockInQuantity = 32,
                            Subtitles = "French",
                            Supplier = "Brown - Anderson",
                            TrailerURL = "http://johanna.biz",
                            Year = new DateTime(2001, 8, 31, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 49,
                            Actors = "Alisa Grimes,Christ Miller,Kendrick Kuhlman",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 997, DateTimeKind.Local).AddTicks(3371),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Qui est sunt qui consequatur laboriosam blanditiis commodi dicta pariatur.",
                            Director = "Fanny Osinski",
                            FilmName = "Intelligent Granite Mouse",
                            Language = "French",
                            OriginalName = "Ergonomic Granite BallOriginal",
                            Status = 0,
                            StockInQuantity = 97,
                            Subtitles = "French",
                            Supplier = "Ratke - Pacocha",
                            TrailerURL = "http://krystina.biz",
                            Year = new DateTime(2005, 8, 12, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 50,
                            Actors = "Thea Gerhold,Francisco Corkery,Kariane Howe",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 997, DateTimeKind.Local).AddTicks(8764),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Quisquam quia sint repudiandae quod repudiandae accusantium minus et occaecati.",
                            Director = "Jana Shanahan",
                            FilmName = "Handmade Plastic Towels",
                            Language = "French",
                            OriginalName = "Small Fresh CheeseOriginal",
                            Status = 0,
                            StockInQuantity = 39,
                            Subtitles = "English",
                            Supplier = "Harber - Nader",
                            TrailerURL = "https://paolo.info",
                            Year = new DateTime(2017, 4, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 51,
                            Actors = "Maye Wilderman,Reese Schamberger,Leatha Barton",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 998, DateTimeKind.Local).AddTicks(2473),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Ut dolorem culpa blanditiis facilis et culpa non quo enim.",
                            Director = "Josianne Barrows",
                            FilmName = "Intelligent Steel Towels",
                            Language = "German",
                            OriginalName = "Licensed Metal TowelsOriginal",
                            Status = 0,
                            StockInQuantity = 17,
                            Subtitles = "Spanish",
                            Supplier = "Schiller Group",
                            TrailerURL = "https://sigmund.net",
                            Year = new DateTime(2010, 12, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 52,
                            Actors = "Stanford Simonis,Ella Harris,Orval Gorczany",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 998, DateTimeKind.Local).AddTicks(6949),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Sunt id at molestias dolor culpa error voluptatem nulla iste.",
                            Director = "Carey Reynolds",
                            FilmName = "Generic Frozen Mouse",
                            Language = "German",
                            OriginalName = "Handmade Metal TableOriginal",
                            Status = 0,
                            StockInQuantity = 31,
                            Subtitles = "French",
                            Supplier = "Anderson Inc",
                            TrailerURL = "https://eudora.info",
                            Year = new DateTime(2022, 11, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 53,
                            Actors = "Jan Lehner,Ressie Walsh,Bette Mueller",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 999, DateTimeKind.Local).AddTicks(1089),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Quia ipsa assumenda iste debitis itaque sit enim necessitatibus repellat.",
                            Director = "Ressie Wehner",
                            FilmName = "Ergonomic Soft Shirt",
                            Language = "French",
                            OriginalName = "Awesome Frozen ChipsOriginal",
                            Status = 0,
                            StockInQuantity = 14,
                            Subtitles = "French",
                            Supplier = "Lubowitz - Hickle",
                            TrailerURL = "https://christ.info",
                            Year = new DateTime(1996, 2, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 54,
                            Actors = "Palma Langworth,Karolann Reinger,Ambrose Bins",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 9, 999, DateTimeKind.Local).AddTicks(6712),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Soluta debitis eveniet quisquam expedita ipsam voluptates consectetur qui unde.",
                            Director = "Lempi Emmerich",
                            FilmName = "Intelligent Concrete Bike",
                            Language = "Spanish",
                            OriginalName = "Rustic Wooden ShirtOriginal",
                            Status = 0,
                            StockInQuantity = 20,
                            Subtitles = "French",
                            Supplier = "Homenick Group",
                            TrailerURL = "https://cynthia.com",
                            Year = new DateTime(2001, 5, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 55,
                            Actors = "Desiree Kuhn,Shemar Schowalter,Elaina Weber",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 10, 0, DateTimeKind.Local).AddTicks(2487),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Nemo hic vel consequatur est voluptate laudantium necessitatibus non aperiam.",
                            Director = "Nyah Lowe",
                            FilmName = "Generic Plastic Bacon",
                            Language = "German",
                            OriginalName = "Handcrafted Plastic ComputerOriginal",
                            Status = 0,
                            StockInQuantity = 38,
                            Subtitles = "French",
                            Supplier = "Toy and Sons",
                            TrailerURL = "http://alvena.info",
                            Year = new DateTime(2017, 1, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 56,
                            Actors = "Russel Auer,Jennifer O'Reilly,Alexandrea Kihn",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 10, 0, DateTimeKind.Local).AddTicks(7567),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Et aperiam quia omnis eos velit eveniet quis asperiores similique.",
                            Director = "Bryce Zulauf",
                            FilmName = "Handcrafted Soft Pants",
                            Language = "French",
                            OriginalName = "Generic Soft SausagesOriginal",
                            Status = 0,
                            StockInQuantity = 94,
                            Subtitles = "German",
                            Supplier = "Hahn - Lowe",
                            TrailerURL = "http://easter.biz",
                            Year = new DateTime(2004, 8, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 57,
                            Actors = "Fabian Hartmann,Fritz Wyman,Fiona Fadel",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 10, 1, DateTimeKind.Local).AddTicks(2287),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Voluptatem eligendi architecto consequatur ut quam odio quia reprehenderit amet.",
                            Director = "Nils Zieme",
                            FilmName = "Generic Soft Chicken",
                            Language = "Spanish",
                            OriginalName = "Intelligent Concrete SausagesOriginal",
                            Status = 0,
                            StockInQuantity = 20,
                            Subtitles = "French",
                            Supplier = "Collier - Kirlin",
                            TrailerURL = "https://rosendo.info",
                            Year = new DateTime(2017, 1, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 58,
                            Actors = "Jakayla Batz,Emmanuel Ernser,Cristobal Rippin",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 10, 1, DateTimeKind.Local).AddTicks(6685),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Quis ad non perferendis sint qui dolores minus qui amet.",
                            Director = "Alf Schulist",
                            FilmName = "Sleek Plastic Car",
                            Language = "Spanish",
                            OriginalName = "Handcrafted Wooden ChairOriginal",
                            Status = 0,
                            StockInQuantity = 89,
                            Subtitles = "Spanish",
                            Supplier = "Lind, Wunsch and King",
                            TrailerURL = "https://norberto.info",
                            Year = new DateTime(2010, 4, 17, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 59,
                            Actors = "Tom Klocko,Guadalupe McGlynn,Dereck Hirthe",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 10, 2, DateTimeKind.Local).AddTicks(741),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Qui corrupti aliquid voluptas temporibus qui tempore molestiae rerum aliquam.",
                            Director = "Hermina Bartell",
                            FilmName = "Sleek Cotton Chicken",
                            Language = "Spanish",
                            OriginalName = "Licensed Granite TunaOriginal",
                            Status = 0,
                            StockInQuantity = 37,
                            Subtitles = "Spanish",
                            Supplier = "Daugherty, Marks and Weissnat",
                            TrailerURL = "https://johathan.name",
                            Year = new DateTime(2024, 2, 4, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 60,
                            Actors = "Harry Vandervort,Destin Cremin,Jonas Schowalter",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 2, 5, 16, 37, 10, 2, DateTimeKind.Local).AddTicks(6121),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Sit amet rerum nemo incidunt rerum et sit nisi excepturi.",
                            Director = "Brigitte Labadie",
                            FilmName = "Incredible Frozen Ball",
                            Language = "French",
                            OriginalName = "Small Plastic ComputerOriginal",
                            Status = 0,
                            StockInQuantity = 33,
                            Subtitles = "English",
                            Supplier = "Parker, Lebsack and Hessel",
                            TrailerURL = "http://ava.net",
                            Year = new DateTime(2002, 8, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmArtist", b =>
                {
                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("ArtistID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("FilmID", "ArtistID");

                    b.HasIndex("ArtistID");

                    b.ToTable("FilmArtists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmDirector", b =>
                {
                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("DirectorID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("FilmDirectors");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DamagedCount")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StockCount")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.SpecialCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("SpecialCategories");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.UserFilmList", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FilmID");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserID", "FilmID")
                        .IsUnique();

                    b.ToTable("UserFilmLists");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Courier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CourierID");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.DeliveryPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryID");

                    b.ToTable("DeliveryPlans");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.OrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.SupplierFilm", b =>
                {
                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuppliedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplierID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("SupplierFilms");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Membership", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmLimit")
                        .HasColumnType("int");

                    b.Property<int>("FilmPerExchange")
                        .HasColumnType("int");

                    b.Property<decimal>("MontlyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreditCardExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DataStatus")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MembershipID")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipStatus")
                        .HasColumnType("int");

                    b.Property<int?>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserFilmRental", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<string>("FirstID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("UserFilmRentals");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserWatchList", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<string>("FirstID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("UserWatchLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Award", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("Awards")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.CategoryFilm", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Category", "Category")
                        .WithMany("CategoryFilm")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Film", "film")
                        .WithMany("categoryFilms")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Comment", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FaultyFilm", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("faultyFilms")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Inventory", "Inventory")
                        .WithMany("FaultyFilm")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Film", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.SpecialCategory", "SpecialCategory")
                        .WithMany("Film")
                        .HasForeignKey("SpecialCategoryID");

                    b.Navigation("SpecialCategory");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmArtist", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Artist", "Artist")
                        .WithMany("filmArtists")
                        .HasForeignKey("ArtistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("FilmArtist")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmDirector", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Director", "Director")
                        .WithMany("filmDirectors")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("filmDirectors")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Inventory", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("Inventory")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.SupplierEntities.Supplier", "Supplier")
                        .WithMany("Inventories")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Rating", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("ratings")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Rating")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.UserFilmList", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Films")
                        .WithMany("UserFilmList")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "Users")
                        .WithMany("UserFilmList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Films");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Delivery", b =>
                {
                    b.HasOne("MODEL.Entities.OrderEntities.Courier", "Courier")
                        .WithMany("Deliveries")
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.DeliveryPlan", b =>
                {
                    b.HasOne("MODEL.Entities.OrderEntities.Delivery", "Delivery")
                        .WithMany("DeliveryPlans")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Order", b =>
                {
                    b.HasOne("MODEL.Entities.OrderEntities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.OrderDetail", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.OrderEntities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Payment", b =>
                {
                    b.HasOne("MODEL.Entities.SupplierEntities.Supplier", "Supplier")
                        .WithMany("payments")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.SupplierFilm", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("supplierFilm")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.SupplierEntities.Supplier", "Supplier")
                        .WithMany("supplierFilms")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Notification", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.User", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.Membership", "Membership")
                        .WithMany("User")
                        .HasForeignKey("MembershipID");

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserFilmRental", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("userFilmRental")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("userFilmRentals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserWatchList", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("userWatchLists")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("UserWatchList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Artist", b =>
                {
                    b.Navigation("filmArtists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Category", b =>
                {
                    b.Navigation("CategoryFilm");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Director", b =>
                {
                    b.Navigation("filmDirectors");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Film", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Comments");

                    b.Navigation("FilmArtist");

                    b.Navigation("Inventory");

                    b.Navigation("OrderDetails");

                    b.Navigation("UserFilmList");

                    b.Navigation("categoryFilms");

                    b.Navigation("faultyFilms");

                    b.Navigation("filmDirectors");

                    b.Navigation("ratings");

                    b.Navigation("supplierFilm");

                    b.Navigation("userFilmRental");

                    b.Navigation("userWatchLists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Inventory", b =>
                {
                    b.Navigation("FaultyFilm");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.SpecialCategory", b =>
                {
                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Courier", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Delivery", b =>
                {
                    b.Navigation("DeliveryPlans");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Supplier", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("payments");

                    b.Navigation("supplierFilms");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Membership", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.User", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Notification");

                    b.Navigation("Order");

                    b.Navigation("Rating");

                    b.Navigation("UserFilmList");

                    b.Navigation("UserWatchList");

                    b.Navigation("userFilmRentals");
                });
#pragma warning restore 612, 618
        }
    }
}
