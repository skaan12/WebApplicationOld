// <auto-generated />
using System;
using DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Artist", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Award", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("AwardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AwardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("WinnerName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.ToTable("Awards");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.CategoryFilm", b =>
                {
                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("CategoryID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("CategoryFilms");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserID");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Director", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Directors");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FaultyFilm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int?>("FilmStatus")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<int>("InventoryID")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("TestDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("InventoryID");

                    b.ToTable("FaultyFilms");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Film", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Actors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Director")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilmName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginalName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SpecialCategoryID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StockInQuantity")
                        .HasColumnType("int");

                    b.Property<string>("Subtitles")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Supplier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrailerURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Year")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SpecialCategoryID");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            ID = 31,
                            Actors = "Shanny Koss,Mckenzie Langosh,River Mante",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 717, DateTimeKind.Local).AddTicks(3932),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Totam commodi libero laudantium unde omnis ad eligendi alias saepe.",
                            Director = "Sharon McKenzie",
                            FilmName = "Handcrafted Steel Keyboard",
                            Language = "French",
                            OriginalName = "Incredible Steel KeyboardOriginal",
                            Status = 0,
                            StockInQuantity = 35,
                            Subtitles = "German",
                            Supplier = "Adams - Stanton",
                            TrailerURL = "http://aylin.info",
                            Year = new DateTime(2021, 1, 29, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 32,
                            Actors = "Pearline Dooley,Lauryn Bechtelar,Zola O'Conner",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 718, DateTimeKind.Local).AddTicks(5224),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Enim et iusto ut illo alias labore aut amet corporis.",
                            Director = "Crawford Mertz",
                            FilmName = "Small Frozen Pizza",
                            Language = "French",
                            OriginalName = "Tasty Frozen PantsOriginal",
                            Status = 0,
                            StockInQuantity = 97,
                            Subtitles = "French",
                            Supplier = "Abernathy and Sons",
                            TrailerURL = "https://eveline.biz",
                            Year = new DateTime(2009, 5, 11, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 33,
                            Actors = "Lavon Hills,Shanny Jacobi,Rosamond Daniel",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 718, DateTimeKind.Local).AddTicks(8946),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Magnam incidunt non dicta dignissimos commodi fugiat aut eum aut.",
                            Director = "Allie Davis",
                            FilmName = "Ergonomic Frozen Car",
                            Language = "German",
                            OriginalName = "Sleek Rubber CarOriginal",
                            Status = 0,
                            StockInQuantity = 37,
                            Subtitles = "Spanish",
                            Supplier = "Dicki, Sporer and Rosenbaum",
                            TrailerURL = "https://amalia.org",
                            Year = new DateTime(2004, 8, 29, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 34,
                            Actors = "Hudson Grimes,Elza Brakus,Heloise Ruecker",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 719, DateTimeKind.Local).AddTicks(2607),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Magnam aspernatur perferendis vitae totam ipsa sit odio omnis dicta.",
                            Director = "Junius White",
                            FilmName = "Handcrafted Fresh Chips",
                            Language = "German",
                            OriginalName = "Sleek Plastic ShirtOriginal",
                            Status = 0,
                            StockInQuantity = 70,
                            Subtitles = "Spanish",
                            Supplier = "Baumbach - Sporer",
                            TrailerURL = "http://madie.net",
                            Year = new DateTime(2001, 12, 30, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 35,
                            Actors = "Phyllis Lang,Zachary Kub,Brittany Mohr",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 719, DateTimeKind.Local).AddTicks(5650),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Quam maiores quam voluptatem nulla praesentium possimus asperiores tenetur reiciendis.",
                            Director = "Austen Hilll",
                            FilmName = "Small Rubber Cheese",
                            Language = "English",
                            OriginalName = "Awesome Metal SausagesOriginal",
                            Status = 0,
                            StockInQuantity = 74,
                            Subtitles = "French",
                            Supplier = "Tillman LLC",
                            TrailerURL = "https://alyson.net",
                            Year = new DateTime(2001, 12, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 36,
                            Actors = "Linda Bashirian,Jerrod O'Kon,Etha Ortiz",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 719, DateTimeKind.Local).AddTicks(8660),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Dignissimos aliquam sit et perferendis corporis enim earum ut aut.",
                            Director = "Shannon MacGyver",
                            FilmName = "Ergonomic Frozen Cheese",
                            Language = "Spanish",
                            OriginalName = "Incredible Plastic KeyboardOriginal",
                            Status = 0,
                            StockInQuantity = 16,
                            Subtitles = "Spanish",
                            Supplier = "Wyman - Bode",
                            TrailerURL = "http://shanna.info",
                            Year = new DateTime(2011, 6, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 37,
                            Actors = "Merlin Stamm,Elian Marquardt,Noelia Senger",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 720, DateTimeKind.Local).AddTicks(2549),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Sunt aut nihil eius architecto dolore consequatur adipisci molestiae sit.",
                            Director = "Diamond Fritsch",
                            FilmName = "Small Granite Sausages",
                            Language = "German",
                            OriginalName = "Intelligent Steel TowelsOriginal",
                            Status = 0,
                            StockInQuantity = 6,
                            Subtitles = "Spanish",
                            Supplier = "Bednar Inc",
                            TrailerURL = "https://wava.name",
                            Year = new DateTime(2024, 11, 21, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 38,
                            Actors = "Drew Smith,Bonnie Stanton,Brant Gutkowski",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 720, DateTimeKind.Local).AddTicks(5932),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Perspiciatis placeat placeat nemo reprehenderit quia perspiciatis at esse tempora.",
                            Director = "Waldo Kling",
                            FilmName = "Awesome Rubber Bike",
                            Language = "English",
                            OriginalName = "Sleek Metal ComputerOriginal",
                            Status = 0,
                            StockInQuantity = 74,
                            Subtitles = "Spanish",
                            Supplier = "Watsica - Breitenberg",
                            TrailerURL = "http://brando.biz",
                            Year = new DateTime(2012, 9, 5, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 39,
                            Actors = "Cooper Weissnat,Corrine Hayes,Jonathan Lesch",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 720, DateTimeKind.Local).AddTicks(9230),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Et dolorem accusamus in sit enim quo minus voluptas distinctio.",
                            Director = "Otha Waters",
                            FilmName = "Generic Plastic Keyboard",
                            Language = "French",
                            OriginalName = "Awesome Metal BaconOriginal",
                            Status = 0,
                            StockInQuantity = 30,
                            Subtitles = "English",
                            Supplier = "Crona, Larkin and Skiles",
                            TrailerURL = "http://ronny.name",
                            Year = new DateTime(2011, 2, 21, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 40,
                            Actors = "Dannie Mitchell,Chasity Cole,Ray Kerluke",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 721, DateTimeKind.Local).AddTicks(2567),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Et accusantium ad et iure magni suscipit enim dicta necessitatibus.",
                            Director = "Gilda Miller",
                            FilmName = "Gorgeous Plastic Chair",
                            Language = "French",
                            OriginalName = "Generic Plastic KeyboardOriginal",
                            Status = 0,
                            StockInQuantity = 53,
                            Subtitles = "Spanish",
                            Supplier = "O'Conner, Roberts and Mills",
                            TrailerURL = "http://oswaldo.com",
                            Year = new DateTime(1997, 8, 15, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 41,
                            Actors = "Cordell Dibbert,Katlyn Bednar,Myles Bailey",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 721, DateTimeKind.Local).AddTicks(5558),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Quis perferendis voluptas labore voluptas molestiae omnis autem quaerat iusto.",
                            Director = "Jayda Schulist",
                            FilmName = "Licensed Metal Hat",
                            Language = "German",
                            OriginalName = "Small Frozen BikeOriginal",
                            Status = 0,
                            StockInQuantity = 99,
                            Subtitles = "English",
                            Supplier = "Hamill and Sons",
                            TrailerURL = "https://cora.org",
                            Year = new DateTime(2012, 9, 26, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 42,
                            Actors = "Eloise Stark,Mona Harvey,Carlie Baumbach",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 721, DateTimeKind.Local).AddTicks(8490),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Necessitatibus nobis ipsam ratione unde iusto et officia at et.",
                            Director = "Lauretta Bayer",
                            FilmName = "Awesome Cotton Gloves",
                            Language = "French",
                            OriginalName = "Awesome Steel GlovesOriginal",
                            Status = 0,
                            StockInQuantity = 99,
                            Subtitles = "French",
                            Supplier = "Quitzon, Corwin and Schumm",
                            TrailerURL = "https://rebekah.biz",
                            Year = new DateTime(2012, 9, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 43,
                            Actors = "Aimee Lowe,Fredy Dietrich,Amber Rosenbaum",
                            Category = "Drama",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 722, DateTimeKind.Local).AddTicks(1481),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Libero qui et corporis aspernatur qui et laboriosam dignissimos ratione.",
                            Director = "Irving Zulauf",
                            FilmName = "Incredible Granite Chips",
                            Language = "French",
                            OriginalName = "Unbranded Cotton TunaOriginal",
                            Status = 0,
                            StockInQuantity = 71,
                            Subtitles = "Spanish",
                            Supplier = "Hammes - Rau",
                            TrailerURL = "http://alexander.com",
                            Year = new DateTime(2022, 6, 2, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 44,
                            Actors = "Kiel Boyle,Amos Koss,Hilma Lubowitz",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 722, DateTimeKind.Local).AddTicks(4416),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Ea est est corporis necessitatibus officiis corrupti maxime assumenda neque.",
                            Director = "Jeanne Jast",
                            FilmName = "Licensed Wooden Gloves",
                            Language = "German",
                            OriginalName = "Tasty Soft SaladOriginal",
                            Status = 0,
                            StockInQuantity = 60,
                            Subtitles = "English",
                            Supplier = "Kozey Inc",
                            TrailerURL = "http://garret.net",
                            Year = new DateTime(2012, 9, 29, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 45,
                            Actors = "Jonas Krajcik,Torrey Moen,Tillman Bergstrom",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 722, DateTimeKind.Local).AddTicks(7406),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "İn odit maxime et consequuntur ea occaecati temporibus voluptatum aut.",
                            Director = "Meagan Mohr",
                            FilmName = "Generic Frozen Table",
                            Language = "French",
                            OriginalName = "Generic Concrete ChickenOriginal",
                            Status = 0,
                            StockInQuantity = 98,
                            Subtitles = "Spanish",
                            Supplier = "Carroll - Wolff",
                            TrailerURL = "http://houston.biz",
                            Year = new DateTime(2022, 11, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 46,
                            Actors = "Romaine Ankunding,Moises Abernathy,Seamus Heller",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 723, DateTimeKind.Local).AddTicks(329),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Pariatur porro ratione quis ut vitae quisquam ut cupiditate quibusdam.",
                            Director = "Tierra Brekke",
                            FilmName = "Fantastic Soft Towels",
                            Language = "English",
                            OriginalName = "Intelligent Frozen ComputerOriginal",
                            Status = 0,
                            StockInQuantity = 41,
                            Subtitles = "German",
                            Supplier = "Collier, Boehm and Anderson",
                            TrailerURL = "https://leland.info",
                            Year = new DateTime(2005, 8, 1, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 47,
                            Actors = "Mireille Bernhard,Corbin Green,Steve Aufderhar",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 723, DateTimeKind.Local).AddTicks(3268),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Magni non quia quis vitae non ipsam inventore vitae in.",
                            Director = "Cedrick Ankunding",
                            FilmName = "Small Fresh Computer",
                            Language = "French",
                            OriginalName = "Intelligent Soft ShirtOriginal",
                            Status = 0,
                            StockInQuantity = 39,
                            Subtitles = "German",
                            Supplier = "Ernser, Rodriguez and Bergstrom",
                            TrailerURL = "https://juliet.com",
                            Year = new DateTime(2019, 11, 8, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 48,
                            Actors = "Carleton MacGyver,Anya Kautzer,Zakary Luettgen",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 723, DateTimeKind.Local).AddTicks(6213),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Non quam quia qui autem consectetur voluptate blanditiis deleniti possimus.",
                            Director = "Keagan Sipes",
                            FilmName = "Incredible Soft Computer",
                            Language = "English",
                            OriginalName = "Sleek Frozen PizzaOriginal",
                            Status = 0,
                            StockInQuantity = 37,
                            Subtitles = "German",
                            Supplier = "Ebert - McLaughlin",
                            TrailerURL = "https://ısaias.info",
                            Year = new DateTime(2023, 1, 24, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 49,
                            Actors = "Elvie Rosenbaum,Lavern Reynolds,Lucinda Bartoletti",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 723, DateTimeKind.Local).AddTicks(9103),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Dolores sed non illum id fugit facere autem aut et.",
                            Director = "Bennett Wilkinson",
                            FilmName = "Handcrafted Metal Keyboard",
                            Language = "Spanish",
                            OriginalName = "Ergonomic Soft MouseOriginal",
                            Status = 0,
                            StockInQuantity = 26,
                            Subtitles = "Spanish",
                            Supplier = "Wiegand - Goodwin",
                            TrailerURL = "https://august.com",
                            Year = new DateTime(2004, 3, 27, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 50,
                            Actors = "Lauryn Erdman,Freda Wiza,Augustus Hammes",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 724, DateTimeKind.Local).AddTicks(2010),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Repudiandae ut voluptatem quaerat nobis quasi qui saepe provident aut.",
                            Director = "Matteo Ruecker",
                            FilmName = "Handcrafted Wooden Cheese",
                            Language = "French",
                            OriginalName = "Sleek Granite ChairOriginal",
                            Status = 0,
                            StockInQuantity = 98,
                            Subtitles = "French",
                            Supplier = "Spencer - Swaniawski",
                            TrailerURL = "http://americo.biz",
                            Year = new DateTime(2003, 1, 7, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 51,
                            Actors = "Alex Von,Manuel Dietrich,Tatum Nolan",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 724, DateTimeKind.Local).AddTicks(4892),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Earum ea soluta est voluptatibus excepturi voluptate ut corrupti eum.",
                            Director = "Alexzander Bins",
                            FilmName = "Small Cotton Chair",
                            Language = "German",
                            OriginalName = "Unbranded Cotton HatOriginal",
                            Status = 0,
                            StockInQuantity = 38,
                            Subtitles = "Spanish",
                            Supplier = "Labadie - Haley",
                            TrailerURL = "https://trace.name",
                            Year = new DateTime(2004, 8, 27, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 52,
                            Actors = "Delbert King,Jason Grady,Gabe Bins",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 724, DateTimeKind.Local).AddTicks(7793),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Architecto voluptatum dicta perspiciatis repudiandae sint aut quo distinctio consequatur.",
                            Director = "Yessenia Bergnaum",
                            FilmName = "Practical Plastic Gloves",
                            Language = "French",
                            OriginalName = "Rustic Steel ChipsOriginal",
                            Status = 0,
                            StockInQuantity = 90,
                            Subtitles = "French",
                            Supplier = "Cartwright, Johnston and Huel",
                            TrailerURL = "https://eleanore.net",
                            Year = new DateTime(2003, 2, 22, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 53,
                            Actors = "Jaquelin Gorczany,Keenan Considine,Agnes Erdman",
                            Category = "Comedy",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 725, DateTimeKind.Local).AddTicks(1777),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Earum omnis voluptate et illo cum modi labore et ab.",
                            Director = "Giles Nader",
                            FilmName = "Tasty Wooden Shoes",
                            Language = "Spanish",
                            OriginalName = "Incredible Wooden HatOriginal",
                            Status = 0,
                            StockInQuantity = 91,
                            Subtitles = "French",
                            Supplier = "Auer LLC",
                            TrailerURL = "https://larue.name",
                            Year = new DateTime(2022, 3, 28, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 54,
                            Actors = "Mya Senger,Pascale Ratke,Kiel Sanford",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 725, DateTimeKind.Local).AddTicks(5170),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Veritatis sit deserunt eos voluptatibus consequatur corrupti rerum ab quisquam.",
                            Director = "Romaine Frami",
                            FilmName = "Tasty Steel Tuna",
                            Language = "German",
                            OriginalName = "Incredible Soft BikeOriginal",
                            Status = 0,
                            StockInQuantity = 79,
                            Subtitles = "English",
                            Supplier = "Gutmann Inc",
                            TrailerURL = "http://enos.name",
                            Year = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 55,
                            Actors = "Nico Gulgowski,Cecil Dare,Otis Rutherford",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 725, DateTimeKind.Local).AddTicks(9616),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Atque et ipsam sit fugit voluptatem ipsam qui qui eum.",
                            Director = "Henri Lynch",
                            FilmName = "Practical Fresh Keyboard",
                            Language = "French",
                            OriginalName = "Sleek Cotton HatOriginal",
                            Status = 0,
                            StockInQuantity = 23,
                            Subtitles = "English",
                            Supplier = "Steuber, Hilpert and Kuhic",
                            TrailerURL = "http://baby.net",
                            Year = new DateTime(1997, 8, 14, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 56,
                            Actors = "Cicero Anderson,Malika Monahan,August Mraz",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 726, DateTimeKind.Local).AddTicks(3249),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Vel molestiae sapiente animi et incidunt nulla excepturi molestiae suscipit.",
                            Director = "Emmalee Konopelski",
                            FilmName = "Practical Cotton Keyboard",
                            Language = "English",
                            OriginalName = "Tasty Plastic TableOriginal",
                            Status = 0,
                            StockInQuantity = 40,
                            Subtitles = "French",
                            Supplier = "Davis Group",
                            TrailerURL = "https://roger.biz",
                            Year = new DateTime(1997, 6, 25, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 57,
                            Actors = "Elody Prohaska,Corene Beer,Baby Schmidt",
                            Category = "Horror",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 726, DateTimeKind.Local).AddTicks(7103),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Distinctio aspernatur commodi non cumque et ex similique dignissimos maiores.",
                            Director = "Martina Paucek",
                            FilmName = "Incredible Concrete Cheese",
                            Language = "French",
                            OriginalName = "Incredible Metal KeyboardOriginal",
                            Status = 0,
                            StockInQuantity = 49,
                            Subtitles = "English",
                            Supplier = "Cummerata LLC",
                            TrailerURL = "http://reed.name",
                            Year = new DateTime(2014, 5, 21, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 58,
                            Actors = "Bill Swaniawski,Mabelle Kassulke,Finn Boyer",
                            Category = "Action",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 727, DateTimeKind.Local).AddTicks(538),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Soluta quae doloribus dolorem libero asperiores mollitia et deserunt similique.",
                            Director = "Halie Labadie",
                            FilmName = "Ergonomic Metal Chicken",
                            Language = "French",
                            OriginalName = "Rustic Concrete BikeOriginal",
                            Status = 0,
                            StockInQuantity = 20,
                            Subtitles = "French",
                            Supplier = "Schaefer Group",
                            TrailerURL = "http://cordell.info",
                            Year = new DateTime(1997, 9, 30, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 59,
                            Actors = "Nyasia Medhurst,Raleigh Rice,Elinor Daniel",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 727, DateTimeKind.Local).AddTicks(3876),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Architecto at repudiandae quo eos fuga et harum consequatur similique.",
                            Director = "Michele Connelly",
                            FilmName = "Intelligent Rubber Fish",
                            Language = "English",
                            OriginalName = "Handmade Metal BallOriginal",
                            Status = 0,
                            StockInQuantity = 63,
                            Subtitles = "French",
                            Supplier = "Sipes LLC",
                            TrailerURL = "https://marjorie.biz",
                            Year = new DateTime(2015, 7, 14, 0, 0, 0, 0, DateTimeKind.Local)
                        },
                        new
                        {
                            ID = 60,
                            Actors = "Sid Pacocha,Darryl Harber,Mikel Fritsch",
                            Category = "Scifi",
                            ComputerName = "DESKTOP-P8K1SK9",
                            CreatedDate = new DateTime(2025, 1, 21, 15, 33, 51, 727, DateTimeKind.Local).AddTicks(7603),
                            CreatedIpAdress = "192.168.56.1",
                            Description = "Distinctio voluptatem et minus laboriosam eveniet sint consequatur et possimus.",
                            Director = "Evie Harris",
                            FilmName = "Licensed Steel Soap",
                            Language = "German",
                            OriginalName = "Awesome Frozen GlovesOriginal",
                            Status = 0,
                            StockInQuantity = 21,
                            Subtitles = "English",
                            Supplier = "Shanahan LLC",
                            TrailerURL = "http://shanie.net",
                            Year = new DateTime(2013, 11, 9, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmArtist", b =>
                {
                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("ArtistID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("FilmID", "ArtistID");

                    b.HasIndex("ArtistID");

                    b.ToTable("FilmArtists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmDirector", b =>
                {
                    b.Property<int>("DirectorID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("DirectorID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("FilmDirectors");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Inventory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DamagedCount")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("StockCount")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Rating", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<string>("Review")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserID");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.SpecialCategory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("SpecialCategories");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.UserFilmList", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FilmID");

                    b.HasIndex("FilmID");

                    b.HasIndex("UserID", "FilmID")
                        .IsUnique();

                    b.ToTable("UserFilmLists");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Courier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Couriers");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Delivery", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CourierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("CourierID");

                    b.ToTable("Deliveries");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.DeliveryPlan", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime?>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatus")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryID");

                    b.ToTable("DeliveryPlans");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("DeliveryID");

                    b.HasIndex("UserID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.OrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("FilmID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Payment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Method")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Supplier", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Adress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.SupplierFilm", b =>
                {
                    b.Property<int>("SupplierID")
                        .HasColumnType("int");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<int>("FirstID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.Property<DateTime>("SuppliedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SupplierID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("SupplierFilms");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Membership", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilmLimit")
                        .HasColumnType("int");

                    b.Property<int>("FilmPerExchange")
                        .HasColumnType("int");

                    b.Property<decimal>("MontlyFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PackageName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("ComputerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedIpAdress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UpdatedComputerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdatedIpAdress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CVC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreditCardExpDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreditCardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime>("MembershipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembershipID")
                        .HasColumnType("int");

                    b.Property<int>("MembershipStatus")
                        .HasColumnType("int");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MembershipID");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserFilmRental", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<string>("FirstID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsReturned")
                        .HasColumnType("bit");

                    b.Property<DateTime>("RentalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("RentalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("UserFilmRentals");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserWatchList", b =>
                {
                    b.Property<string>("UserID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FilmID")
                        .HasColumnType("int");

                    b.Property<string>("FirstID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecondID")
                        .HasColumnType("int");

                    b.HasKey("UserID", "FilmID");

                    b.HasIndex("FilmID");

                    b.ToTable("UserWatchLists");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Award", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("Awards")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.CategoryFilm", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Category", "Category")
                        .WithMany("CategoryFilm")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Film", "film")
                        .WithMany("categoryFilms")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Comment", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("Comments")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Comment")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FaultyFilm", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("faultyFilms")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Inventory", "Inventory")
                        .WithMany("FaultyFilm")
                        .HasForeignKey("InventoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Inventory");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Film", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.SpecialCategory", "SpecialCategory")
                        .WithMany("Film")
                        .HasForeignKey("SpecialCategoryID");

                    b.Navigation("SpecialCategory");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmArtist", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Artist", "Artist")
                        .WithMany("filmArtists")
                        .HasForeignKey("ArtistID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("FilmArtist")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.FilmDirector", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Director", "Director")
                        .WithMany("filmDirectors")
                        .HasForeignKey("DirectorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("filmDirectors")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");

                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Inventory", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("Inventory")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.SupplierEntities.Supplier", "Supplier")
                        .WithMany("Inventories")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Rating", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("ratings")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Rating")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.UserFilmList", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Films")
                        .WithMany("UserFilmList")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "Users")
                        .WithMany("UserFilmList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Films");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Delivery", b =>
                {
                    b.HasOne("MODEL.Entities.OrderEntities.Courier", "Courier")
                        .WithMany("Deliveries")
                        .HasForeignKey("CourierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courier");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.DeliveryPlan", b =>
                {
                    b.HasOne("MODEL.Entities.OrderEntities.Delivery", "Delivery")
                        .WithMany("DeliveryPlans")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Order", b =>
                {
                    b.HasOne("MODEL.Entities.OrderEntities.Delivery", "Delivery")
                        .WithMany("Orders")
                        .HasForeignKey("DeliveryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Order")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Delivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.OrderDetail", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("OrderDetails")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.OrderEntities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Payment", b =>
                {
                    b.HasOne("MODEL.Entities.SupplierEntities.Supplier", "Supplier")
                        .WithMany("payments")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.SupplierFilm", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("supplierFilm")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.SupplierEntities.Supplier", "Supplier")
                        .WithMany("supplierFilms")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Notification", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("Notification")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.User", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.Membership", "Membership")
                        .WithMany("User")
                        .HasForeignKey("MembershipID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Membership");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserFilmRental", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("userFilmRental")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("userFilmRentals")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.UserWatchList", b =>
                {
                    b.HasOne("MODEL.Entities.FilmEntities.Film", "Film")
                        .WithMany("userWatchLists")
                        .HasForeignKey("FilmID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", "User")
                        .WithMany("UserWatchList")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MODEL.Entities.UserEntities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Artist", b =>
                {
                    b.Navigation("filmArtists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Category", b =>
                {
                    b.Navigation("CategoryFilm");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Director", b =>
                {
                    b.Navigation("filmDirectors");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Film", b =>
                {
                    b.Navigation("Awards");

                    b.Navigation("Comments");

                    b.Navigation("FilmArtist");

                    b.Navigation("Inventory");

                    b.Navigation("OrderDetails");

                    b.Navigation("UserFilmList");

                    b.Navigation("categoryFilms");

                    b.Navigation("faultyFilms");

                    b.Navigation("filmDirectors");

                    b.Navigation("ratings");

                    b.Navigation("supplierFilm");

                    b.Navigation("userFilmRental");

                    b.Navigation("userWatchLists");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.Inventory", b =>
                {
                    b.Navigation("FaultyFilm");
                });

            modelBuilder.Entity("MODEL.Entities.FilmEntities.SpecialCategory", b =>
                {
                    b.Navigation("Film");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Courier", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Delivery", b =>
                {
                    b.Navigation("DeliveryPlans");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("MODEL.Entities.OrderEntities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("MODEL.Entities.SupplierEntities.Supplier", b =>
                {
                    b.Navigation("Inventories");

                    b.Navigation("payments");

                    b.Navigation("supplierFilms");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.Membership", b =>
                {
                    b.Navigation("User");
                });

            modelBuilder.Entity("MODEL.Entities.UserEntities.User", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Notification");

                    b.Navigation("Order");

                    b.Navigation("Rating");

                    b.Navigation("UserFilmList");

                    b.Navigation("UserWatchList");

                    b.Navigation("userFilmRentals");
                });
#pragma warning restore 612, 618
        }
    }
}
